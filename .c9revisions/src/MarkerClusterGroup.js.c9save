{"ts":1360946667989,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\n/*\n * L.MarkerClusterGroup extends L.FeatureGroup by clustering the markers contained within\n */\n\nL.MarkerClusterGroup = L.FeatureGroup.extend({\n\n\toptions: {\n\t\tmaxClusterRadius: 80, //A cluster will cover at most this many pixels from its center\n\t\ticonCreateFunction: null,\n\n\t\tspiderfyOnMaxZoom: true,\n\t\tshowCoverageOnHover: true,\n\t\tzoomToBoundsOnClick: true,\n\t\tsingleMarkerMode: false,\n\n\t\tdisableClusteringAtZoom: null,\n\n        // Setting this to false prevents the removal of any clusters outside of the viewpoint, which\n        // is the default behaviour for performance reasons.\n        removeOutsideVisibleBounds: true,\n\n\t\t//Whether to animate adding markers after adding the MarkerClusterGroup to the map\n\t\t// If you are adding individual markers set to true, if adding bulk markers leave false for massive performance gains.\n\t\tanimateAddingMarkers: false,\n\n\t\t//Increase to increase the distance away that spiderfied markers appear from the center\n\t\tspiderfyDistanceMultiplier: 1,\n\n\t\t//Options to pass to the L.Polygon constructor\n\t\tpolygonOptions: {}\n\t},\n\n\tinitialize: function (options) {\n\t\tL.Util.setOptions(this, options);\n\t\tif (!this.options.iconCreateFunction) {\n\t\t\tthis.options.iconCreateFunction = this._defaultIconCreateFunction;\n\t\t}\n\n\t\tL.FeatureGroup.prototype.initialize.call(this, []);\n\n\t\tthis._inZoomAnimation = 0;\n\t\tthis._needsClustering = [];\n\t\t//The bounds of the currently shown area (from _getExpandedVisibleBounds) Updated on zoom/move\n\t\tthis._currentShownBounds = null;\n\t},\n\n\taddLayer: function (layer) {\n\n\t\tif (layer instanceof L.LayerGroup) {\n\t\t\tvar array = [];\n\t\t\tfor (var i in layer._layers) {\n\t\t\t\tif (layer._layers.hasOwnProperty(i)) {\n\t\t\t\t\tarray.push(layer._layers[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this.addLayers(array);\n\t\t}\n\n\t\tif (!this._map) {\n\t\t\tthis._needsClustering.push(layer);\n\t\t\treturn this;\n\t\t}\n\n\t\tif (this.hasLayer(layer)) {\n\t\t\treturn this;\n\t\t}\n\n\t\t//If we have already clustered we'll need to add this one to a cluster\n\n\t\tif (this._unspiderfy) {\n\t\t\tthis._unspiderfy();\n\t\t}\n\n\t\tthis._addLayer(layer, this._maxZoom);\n\n\t\t//Work out what is visible\n\t\tvar visibleLayer = layer,\n\t\t\tcurrentZoom = this._map.getZoom();\n\t\tif (layer.__parent) {\n\t\t\twhile (visibleLayer.__parent._zoom >= currentZoom) {\n\t\t\t\tvisibleLayer = visibleLayer.__parent;\n\t\t\t}\n\t\t}\n\n\t\tif (this._currentShownBounds.contains(visibleLayer.getLatLng())) {\n\t\t\tif (this.options.animateAddingMarkers) {\n\t\t\t\tthis._animationAddLayer(layer, visibleLayer);\n\t\t\t} else {\n\t\t\t\tthis._animationAddLayerNonAnimated(layer, visibleLayer);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t},\n\n\tremoveLayer: function (layer) {\n\n\t\tif (!this._map) {\n\t\t\tthis._arraySplice(this._needsClustering, layer);\n\t\t\treturn this;\n\t\t}\n\n\t\tif (!layer.__parent) {\n\t\t\treturn this;\n\t\t}\n\n\t\tif (this._unspiderfy) {\n\t\t\tthis._unspiderfy();\n\t\t\tthis._unspiderfyLayer(layer);\n\t\t}\n\n\t\t//Remove the marker from clusters\n\t\tthis._removeLayer(layer, true);\n\n\t\tif (layer._icon) {\n\t\t\tL.FeatureGroup.prototype.removeLayer.call(this, layer);\n\t\t\tlayer.setOpacity(1);\n\t\t}\n\n\t\treturn this;\n\t},\n\n\t//Takes an array of markers and adds them in bulk\n\taddLayers: function (layersArray) {\n\t\tvar i, l, m;\n\t\tif (!this._map) {\n\t\t\tthis._needsClustering = this._needsClustering.concat(layersArray);\n\t\t\treturn this;\n\t\t}\n\n\t\tfor (i = 0, l = layersArray.length; i < l; i++) {\n\t\t\tm = layersArray[i];\n\n\t\t\tif (this.hasLayer(m)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tthis._addLayer(m, this._maxZoom);\n\n\t\t\t//If we just made a cluster of size 2 then we need to remove the other marker from the map (if it is) or we never will\n\t\t\tif (m.__parent) {\n\t\t\t\tif (m.__parent.getChildCount() === 2) {\n\t\t\t\t\tvar markers = m.__parent.getAllChildMarkers(),\n\t\t\t\t\t\totherMarker = markers[0] === m ? markers[1] : markers[0];\n\t\t\t\t\tL.FeatureGroup.prototype.removeLayer.call(this, otherMarker);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//Update the icons of all those visible clusters that were affected\n\t\tfor (i in this._layers) {\n\t\t\tif (this._layers.hasOwnProperty(i)) {\n\t\t\t\tm = this._layers[i];\n\t\t\t\tif (m instanceof L.MarkerCluster && m._iconNeedsUpdate) {\n\t\t\t\t\tm._updateIcon();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._topClusterLevel._recursivelyAddChildrenToMap(null, this._zoom, this._currentShownBounds);\n\n\t\treturn this;\n\t},\n\n\t//Takes an array of markers and removes them in bulk\n\tremoveLayers: function (layersArray) {\n\t\tvar i, l, m;\n\n\t\tif (!this._map) {\n\t\t\tfor (i = 0, l = layersArray.length; i < l; i++) {\n\t\t\t\tthis._arraySplice(this._needsClustering, layersArray[i]);\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\n\t\tfor (i = 0, l = layersArray.length; i < l; i++) {\n\t\t\tm = layersArray[i];\n\n\t\t\tif (!m.__parent) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tthis._removeLayer(m, true, true);\n\n\t\t\tif (m._icon) {\n\t\t\t\tL.FeatureGroup.prototype.removeLayer.call(this, m);\n\t\t\t\tm.setOpacity(1);\n\t\t\t}\n\t\t}\n\n\t\t//Fix up the clusters and markers on the map\n\t\tthis._topClusterLevel._recursivelyAddChildrenToMap(null, this._zoom, this._currentShownBounds);\n\n\t\tfor (i in this._layers) {\n\t\t\tif (this._layers.hasOwnProperty(i)) {\n\t\t\t\tm = this._layers[i];\n\t\t\t\tif (m instanceof L.MarkerCluster) {\n\t\t\t\t\tm._updateIcon();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\t//Removes all layers from the MarkerClusterGroup\n\tclearLayers: function () {\n\t\t//Need our own special implementation as the LayerGroup one doesn't work for us\n\n\t\t//If we aren't on the map (yet), blow away the markers we know of\n\t\tif (!this._map) {\n\t\t\tthis._needsClustering = [];\n\t\t\tdelete this._gridClusters;\n\t\t\tdelete this._gridUnclustered;\n\t\t}\n\n\t\tif (this._unspiderfy) {\n\t\t\tthis._unspiderfy();\n\t\t}\n\n\t\t//Remove all the visible layers\n\t\tfor (var i in this._layers) {\n\t\t\tif (this._layers.hasOwnProperty(i)) {\n\t\t\t\tL.FeatureGroup.prototype.removeLayer.call(this, this._layers[i]);\n\t\t\t}\n\t\t}\n\n\t\tthis.eachLayer(function (marker) {\n\t\t\tdelete marker.__parent;\n\t\t});\n\n\t\tif (this._map) {\n\t\t\t//Reset _topClusterLevel and the DistanceGrids\n\t\t\tthis._generateInitialClusters();\n\t\t}\n\n\t\treturn this;\n\t},\n\n\t//Override FeatureGroup.getBounds as it doesn't work\n\tgetBounds: function () {\n\t\tvar bounds = new L.LatLngBounds();\n\t\tif (this._topClusterLevel) {\n\t\t\tbounds.extend(this._topClusterLevel._bounds);\n\t\t} else {\n\t\t\tfor (var i = this._needsClustering.length - 1; i >= 0; i--) {\n\t\t\t\tbounds.extend(this._needsClustering[i].getLatLng());\n\t\t\t}\n\t\t}\n\t\treturn bounds;\n\t},\n\n\t//Overrides LayerGroup.eachLayer\n\teachLayer: function (method, context) {\n\t\tvar markers = this._needsClustering.slice(),\n\t\t    i;\n\n\t\tif (this._topClusterLevel) {\n\t\t\tthis._topClusterLevel.getAllChildMarkers(markers);\n\t\t}\n\n\t\tfor (i = markers.length - 1; i >= 0; i--) {\n\t\t\tmethod.call(context, markers[i]);\n\t\t}\n\t},\n\n\t//Returns true if the given layer is in this MarkerClusterGroup\n\thasLayer: function (layer) {\n\t\tif (this._needsClustering.length > 0) {\n\t\t\tvar anArray = this._needsClustering;\n\t\t\tfor (var i = anArray.length - 1; i >= 0; i--) {\n\t\t\t\tif (anArray[i] === layer) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn !!(layer.__parent && layer.__parent._group === this);\n\t},\n\n\t//Zoom down to show the given layer (spiderfying if necessary) then calls the callback\n\tzoomToShowLayer: function (layer, callback) {\n\n\t\tvar showMarker = function () {\n\t\t\tif ((layer._icon || layer.__parent._icon) && !this._inZoomAnimation) {\n\t\t\t\tthis._map.off('moveend', showMarker, this);\n\t\t\t\tthis.off('animationend', showMarker, this);\n\n\t\t\t\tif (layer._icon) {\n\t\t\t\t\tcallback();\n\t\t\t\t} else if (layer.__parent._icon) {\n\t\t\t\t\tvar afterSpiderfy = function () {\n\t\t\t\t\t\tthis.off('spiderfied', afterSpiderfy, this);\n\t\t\t\t\t\tcallback();\n\t\t\t\t\t};\n\n\t\t\t\t\tthis.on('spiderfied', afterSpiderfy, this);\n\t\t\t\t\tlayer.__parent.spiderfy();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tif (layer._icon) {\n\t\t\tcallback();\n\t\t} else if (layer.__parent._zoom < this._map.getZoom()) {\n\t\t\t//Layer should be visible now but isn't on screen, just pan over to it\n\t\t\tthis._map.on('moveend', showMarker, this);\n\t\t\tif (!layer._icon) {\n\t\t\t\tthis._map.panTo(layer.getLatLng());\n\t\t\t}\n\t\t} else {\n\t\t\tthis._map.on('moveend', showMarker, this);\n\t\t\tthis.on('animationend', showMarker, this);\n\t\t\tthis._map.setView(layer.getLatLng(), layer.__parent._zoom + 1);\n\t\t\tlayer.__parent.zoomToBounds();\n\t\t}\n\t},\n\n\t//Overrides FeatureGroup.onAdd\n\tonAdd: function (map) {\n\t\tthis._map = map;\n\n\t\tif (!this._gridClusters) {\n\t\t\tthis._generateInitialClusters();\n\t\t}\n\n\t\tfor (var i = 0, l = this._needsClustering.length; i < l; i++) {\n\t\t\tvar layer = this._needsClustering[i];\n\t\t\tif (layer.__parent) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthis._addLayer(layer, this._maxZoom);\n\t\t}\n\t\tthis._needsClustering = [];\n\n\t\tthis._map.on('zoomend', this._zoomEnd, this);\n\t\tthis._map.on('moveend', this._moveEnd, this);\n\n\t\tif (this._spiderfierOnAdd) { //TODO FIXME: Not sure how to have spiderfier add something on here nicely\n\t\t\tthis._spiderfierOnAdd();\n\t\t}\n\n\t\tthis._bindEvents();\n\n\n\t\t//Actually add our markers to the map:\n\n\t\t//Remember the current zoom level and bounds\n\t\tthis._zoom = this._map.getZoom();\n\t\tthis._currentShownBounds = this._getExpandedVisibleBounds();\n\n\t\t//Make things appear on the map\n\t\tthis._topClusterLevel._recursivelyAddChildrenToMap(null, this._zoom, this._currentShownBounds);\n\t},\n\n\t//Overrides FeatureGroup.onRemove\n\tonRemove: function (map) {\n\t\tthis._map.off('zoomend', this._zoomEnd, this);\n\t\tthis._map.off('moveend', this._moveEnd, this);\n\n\t\tthis._unbindEvents();\n\n\t\t//In case we are in a cluster animation\n\t\tthis._map._mapPane.className = this._map._mapPane.className.replace(' leaflet-cluster-anim', '');\n\n\t\tif (this._spiderfierOnRemove) { //TODO FIXME: Not sure how to have spiderfier add something on here nicely\n\t\t\tthis._spiderfierOnRemove();\n\t\t}\n\n\t\t//Clean up all the layers we added to the map\n\t\tfor (var i in this._layers) {\n\t\t\tif (this._layers.hasOwnProperty(i)) {\n\t\t\t\tL.FeatureGroup.prototype.removeLayer.call(this, this._layers[i]);\n\t\t\t}\n\t\t}\n\n\t\tthis._map = null;\n\t},\n\n\n\t//Remove the given object from the given array\n\t_arraySplice: function (anArray, obj) {\n\t\tfor (var i = anArray.length - 1; i >= 0; i--) {\n\t\t\tif (anArray[i] === obj) {\n\t\t\t\tanArray.splice(i, 1);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t},\n\n\t//Internal function for removing a marker from everything.\n\t//dontUpdateMap: set to true if you will handle updating the map manually (for bulk functions)\n\t_removeLayer: function (marker, removeFromDistanceGrid, dontUpdateMap) {\n\t\tvar gridClusters = this._gridClusters,\n\t\t\tgridUnclustered = this._gridUnclustered,\n\t\t\tmap = this._map;\n\n\t\t//Remove the marker from distance clusters it might be in\n\t\tif (removeFromDistanceGrid) {\n\t\t\tfor (var z = this._maxZoom; z >= 0; z--) {\n\t\t\t\tif (!gridUnclustered[z].removeObject(marker, map.project(marker.getLatLng(), z))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//Work our way up the clusters removing them as we go if required\n\t\tvar cluster = marker.__parent,\n\t\t\tmarkers = cluster._markers,\n\t\t\totherMarker;\n\n\t\t//Remove the marker from the immediate parents marker list\n\t\tthis._arraySplice(markers, marker);\n\n\t\twhile (cluster) {\n\t\t\tcluster._childCount--;\n\n\t\t\tif (cluster._zoom < 0) {\n\t\t\t\t//Top level, do nothing\n\t\t\t\tbreak;\n\t\t\t} else if (removeFromDistanceGrid && cluster._childCount <= 1) { //Cluster no longer required\n\t\t\t\t//We need to push the other marker up to the parent\n\t\t\t\totherMarker = cluster._markers[0] === marker ? cluster._markers[1] : cluster._markers[0];\n\n\t\t\t\t//Update distance grid\n\t\t\t\tgridClusters[cluster._zoom].removeObject(cluster, map.project(cluster._cLatLng, cluster._zoom));\n\t\t\t\tgridUnclustered[cluster._zoom].addObject(otherMarker, map.project(otherMarker.getLatLng(), cluster._zoom));\n\n\t\t\t\t//Move otherMarker up to parent\n\t\t\t\tthis._arraySplice(cluster.__parent._childClusters, cluster);\n\t\t\t\tcluster.__parent._markers.push(otherMarker);\n\t\t\t\totherMarker.__parent = cluster.__parent;\n\n\t\t\t\tif (cluster._icon) {\n\t\t\t\t\t//Cluster is currently on the map, need to put the marker on the map instead\n\t\t\t\t\tL.FeatureGroup.prototype.removeLayer.call(this, cluster);\n\t\t\t\t\tif (!dontUpdateMap) {\n\t\t\t\t\t\tL.FeatureGroup.prototype.addLayer.call(this, otherMarker);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcluster._recalculateBounds();\n\t\t\t\tif (!dontUpdateMap || !cluster._icon) {\n\t\t\t\t\tcluster._updateIcon();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcluster = cluster.__parent;\n\t\t}\n\n\t\tdelete marker.__parent;\n\t},\n\n\t//Overrides FeatureGroup._propagateEvent\n\t_propagateEvent: function (e) {\n\t\tif (e.target instanceof L.MarkerCluster) {\n\t\t\te.type = 'cluster' + e.type;\n\t\t}\n\t\tL.FeatureGroup.prototype._propagateEvent.call(this, e);\n\t},\n\n\t//Default functionality\n\t_defaultIconCreateFunction: function (cluster) {\n\t\tvar childCount = cluster.getChildCount();\n\n\t\tvar c = ' marker-cluster-';\n\t\tif (childCount < 10) {\n\t\t\tc += 'small';\n\t\t} else if (childCount < 100) {\n\t\t\tc += 'medium';\n\t\t} else {\n\t\t\tc += 'large';\n\t\t}\n\n\t\treturn new L.DivIcon({ html: '<div><span>' + childCount + '</span></div>', className: 'marker-cluster' + c, iconSize: new L.Point(40, 40) });\n\t},\n\n\t_bindEvents: function () {\n\t\tvar shownPolygon = null,\n\t\t\tmap = this._map,\n\n\t\t\tspiderfyOnMaxZoom = this.options.spiderfyOnMaxZoom,\n\t\t\tshowCoverageOnHover = this.options.showCoverageOnHover,\n\t\t\tzoomToBoundsOnClick = this.options.zoomToBoundsOnClick;\n\n\t\t//Zoom on cluster click or spiderfy if we are at the lowest level\n\t\tif (spiderfyOnMaxZoom || zoomToBoundsOnClick) {\n\t\t\tthis.on('clusterclick', function (a) {\n\t\t\t\tif (map.getMaxZoom() === map.getZoom()) {\n\t\t\t\t\tif (spiderfyOnMaxZoom) {\n\t\t\t\t\t\ta.layer.spiderfy();\n\t\t\t\t\t}\n\t\t\t\t} else if (zoomToBoundsOnClick) {\n\t\t\t\t\ta.layer.zoomToBounds();\n\t\t\t\t}\n\t\t\t}, this);\n\t\t}\n\n\t\t//Show convex hull (boundary) polygon on mouse over\n\t\tif (showCoverageOnHover) {\n\t\t\tthis.on('clustermouseover', function (a) {\n\t\t\t\tif (this._inZoomAnimation) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (shownPolygon) {\n\t\t\t\t\tmap.removeLayer(shownPolygon);\n\t\t\t\t}\n\t\t\t\tif (a.layer.getChildCount() > 2 && a.layer !== this._spiderfied) {\n\t\t\t\t\tshownPolygon = new L.Polygon(a.layer.getConvexHull(), this.options.polygonOptions);\n\t\t\t\t\tmap.addLayer(shownPolygon);\n\t\t\t\t}\n\t\t\t}, this);\n\t\t\tthis.on('clustermouseout', function () {\n\t\t\t\tif (shownPolygon) {\n\t\t\t\t\tmap.removeLayer(shownPolygon);\n\t\t\t\t\tshownPolygon = null;\n\t\t\t\t}\n\t\t\t}, this);\n\t\t\tmap.on('zoomend', function () {\n\t\t\t\tif (shownPolygon) {\n\t\t\t\t\tmap.removeLayer(shownPolygon);\n\t\t\t\t\tshownPolygon = null;\n\t\t\t\t}\n\t\t\t}, this);\n\t\t\tmap.on('layerremove', function (opt) {\n\t\t\t\tif (shownPolygon && opt.layer === this) {\n\t\t\t\t\tmap.removeLayer(shownPolygon);\n\t\t\t\t\tshownPolygon = null;\n\t\t\t\t}\n\t\t\t}, this);\n\t\t}\n\t},\n\n\t_unbindEvents: function () {\n\t\tvar spiderfyOnMaxZoom = this.options.spiderfyOnMaxZoom,\n\t\t\tshowCoverageOnHover = this.options.showCoverageOnHover,\n\t\t\tzoomToBoundsOnClick = this.options.zoomToBoundsOnClick,\n\t\t\tmap = this._map;\n\n\t\tif (spiderfyOnMaxZoom || zoomToBoundsOnClick) {\n\t\t\tthis.off('clusterclick', null, this);\n\t\t}\n\t\tif (showCoverageOnHover) {\n\t\t\tthis.off('clustermouseover', null, this);\n\t\t\tthis.off('clustermouseout', null, this);\n\t\t\tmap.off('zoomend', null, this);\n\t\t\tmap.off('layerremove', null, this);\n\t\t}\n\t},\n\n\t_zoomEnd: function () {\n\t\tif (!this._map) { //May have been removed from the map by a zoomEnd handler\n\t\t\treturn;\n\t\t}\n\t\tthis._mergeSplitClusters();\n\n\t\tthis._zoom = this._map._zoom;\n\t\tthis._currentShownBounds = this._getExpandedVisibleBounds();\n\t},\n\n\t_moveEnd: function () {\n\t\tif (this._inZoomAnimation) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar newBounds = this._getExpandedVisibleBounds();\n\n\t\tthis._topClusterLevel._recursivelyRemoveChildrenFromMap(this._currentShownBounds, this._zoom, newBounds);\n\t\tthis._topClusterLevel._recursivelyAddChildrenToMap(null, this._zoom, newBounds);\n\n\t\tthis._currentShownBounds = newBounds;\n\t\treturn;\n\t},\n\n\t_generateInitialClusters: function () {\n\t\tvar maxZoom = this._map.getMaxZoom(),\n\t\t\tradius = this.options.maxClusterRadius;\n\n\t\tif (this.options.disableClusteringAtZoom) {\n\t\t\tmaxZoom = this.options.disableClusteringAtZoom - 1;\n\t\t}\n\t\tthis._maxZoom = maxZoom;\n\t\tthis._gridClusters = {};\n\t\tthis._gridUnclustered = {};\n\n\t\t//Set up DistanceGrids for each zoom\n\t\tfor (var zoom = maxZoom; zoom >= 0; zoom--) {\n\t\t\tthis._gridClusters[zoom] = new L.DistanceGrid(radius);\n\t\t\tthis._gridUnclustered[zoom] = new L.DistanceGrid(radius);\n\t\t}\n\n\t\tthis._topClusterLevel = new L.MarkerCluster(this, -1);\n\t},\n\n\t//Zoom: Zoom to start adding at (Pass this._maxZoom to start at the bottom)\n\t_addLayer: function (layer, zoom) {\n\t\tvar gridClusters = this._gridClusters,\n\t\t    gridUnclustered = this._gridUnclustered,\n\t\t    markerPoint, z;\n\n\t\tif (this.options.singleMarkerMode) {\n\t\t\tlayer.options.icon = this.options.iconCreateFunction({\n\t\t\t\tgetChildCount: function () {\n\t\t\t\t\treturn 1;\n\t\t\t\t},\n\t\t\t\tgetAllChildMarkers: function () {\n\t\t\t\t\treturn [layer];\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t//Find the lowest zoom level to slot this one in\n\t\tfor (; zoom >= 0; zoom--) {\n\t\t\tmarkerPoint = this._map.project(layer.getLatLng(), zoom); // calculate pixel position\n\n\t\t\t//Try find a cluster close by\n\t\t\tvar closest = gridClusters[zoom].getNearObject(markerPoint);\n\t\t\tif (closest) {\n\t\t\t\tclosest._addChild(layer);\n\t\t\t\tlayer.__parent = closest;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t//Try find a marker close by to form a new cluster with\n\t\t\tclosest = gridUnclustered[zoom].getNearObject(markerPoint);\n\t\t\tif (closest) {\n\t\t\t\tvar parent = closest.__parent;\n\t\t\t\tif (parent) {\n\t\t\t\t\tthis._removeLayer(closest, false);\n\t\t\t\t}\n\n\t\t\t\t//Create new cluster with these 2 in it\n\n\t\t\t\tvar newCluster = new L.MarkerCluster(this, zoom, closest, layer);\n\t\t\t\tgridClusters[zoom].addObject(newCluster, this._map.project(newCluster._cLatLng, zoom));\n\t\t\t\tclosest.__parent = newCluster;\n\t\t\t\tlayer.__parent = newCluster;\n\n\t\t\t\t//First create any new intermediate parent clusters that don't exist\n\t\t\t\tvar lastParent = newCluster;\n\t\t\t\tfor (z = zoom - 1; z > parent._zoom; z--) {\n\t\t\t\t\tlastParent = new L.MarkerCluster(this, z, lastParent);\n\t\t\t\t\tgridClusters[z].addObject(lastParent, this._map.project(closest.getLatLng(), z));\n\t\t\t\t}\n\t\t\t\tparent._addChild(lastParent);\n\n\t\t\t\t//Remove closest from this zoom level and any above that it is in, replace with newCluster\n\t\t\t\tfor (z = zoom; z >= 0; z--) {\n\t\t\t\t\tif (!gridUnclustered[z].removeObject(closest, this._map.project(closest.getLatLng(), z))) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t//Didn't manage to cluster in at this zoom, record us as a marker here and continue upwards\n\t\t\tgridUnclustered[zoom].addObject(layer, markerPoint);\n\t\t}\n\n\t\t//Didn't get in anything, add us to the top\n\t\tthis._topClusterLevel._addChild(layer);\n\t\tlayer.__parent = this._topClusterLevel;\n\t\treturn;\n\t},\n\n\t//Merge and split any existing clusters that are too big or small\n\t_mergeSplitClusters: function () {\n\t\tif (this._zoom < this._map._zoom) { //Zoom in, split\n\t\t\tthis._animationStart();\n\t\t\t//Remove clusters now off screen\n\t\t\tthis._topClusterLevel._recursivelyRemoveChildrenFromMap(this._currentShownBounds, this._zoom, this._getExpandedVisibleBounds());\n\n\t\t\tthis._animationZoomIn(this._zoom, this._map._zoom);\n\n\t\t} else if (this._zoom > this._map._zoom) { //Zoom out, merge\n\t\t\tthis._animationStart();\n\n\t\t\tthis._animationZoomOut(this._zoom, this._map._zoom);\n\t\t} else {\n\t\t\tthis._moveEnd();\n\t\t}\n\t},\n\t\n\t//Gets the maps visible bounds expanded in each direction by the size of the screen (so the user cannot see an area we do not cover in one pan)\n\t_getExpandedVisibleBounds: function () {\n        if (!this.options.removeOutsideVisibleBounds) {\n            return this.getBounds();\n        }\n\n\t\tvar map = this._map,\n\t\t\tbounds = map.getBounds(),\n\t\t\tsw = bounds._southWest,\n\t\t\tne = bounds._northEast,\n\t\t\tlatDiff = L.Browser.mobile ? 0 : Math.abs(sw.lat - ne.lat),\n\t\t\tlngDiff = L.Browser.mobile ? 0 : Math.abs(sw.lng - ne.lng);\n\n\t\treturn new L.LatLngBounds(\n\t\t\tnew L.LatLng(sw.lat - latDiff, sw.lng - lngDiff, true),\n\t\t\tnew L.LatLng(ne.lat + latDiff, ne.lng + lngDiff, true));\n\t},\n\n\t//Shared animation code\n\t_animationAddLayerNonAnimated: function (layer, newCluster) {\n\t\tif (newCluster === layer) {\n\t\t\tL.FeatureGroup.prototype.addLayer.call(this, layer);\n\t\t} else if (newCluster._childCount === 2) {\n\t\t\tnewCluster._addToMap();\n\n\t\t\tvar markers = newCluster.getAllChildMarkers();\n\t\t\tL.FeatureGroup.prototype.removeLayer.call(this, markers[0]);\n\t\t\tL.FeatureGroup.prototype.removeLayer.call(this, markers[1]);\n\t\t} else {\n\t\t\tnewCluster._updateIcon();\n\t\t}\n\t}\n});\n\nL.MarkerClusterGroup.include(!L.DomUtil.TRANSITION ? {\n\n\t//Non Animated versions of everything\n\t_animationStart: function () {\n\t\t//Do nothing...\n\t},\n\t_animationZoomIn: function (previousZoomLevel, newZoomLevel) {\n\t\tthis._topClusterLevel._recursivelyRemoveChildrenFromMap(this._currentShownBounds, previousZoomLevel);\n\t\tthis._topClusterLevel._recursivelyAddChildrenToMap(null, newZoomLevel, this._getExpandedVisibleBounds());\n\t},\n\t_animationZoomOut: function (previousZoomLevel, newZoomLevel) {\n\t\tthis._topClusterLevel._recursivelyRemoveChildrenFromMap(this._currentShownBounds, previousZoomLevel);\n\t\tthis._topClusterLevel._recursivelyAddChildrenToMap(null, newZoomLevel, this._getExpandedVisibleBounds());\n\t},\n\t_animationAddLayer: function (layer, newCluster) {\n\t\tthis._animationAddLayerNonAnimated(layer, newCluster);\n\t}\n} : {\n\n\t//Animated versions here\n\t_animationStart: function () {\n\t\tthis._map._mapPane.className += ' leaflet-cluster-anim';\n\t\tthis._inZoomAnimation++;\n\t},\n\t_animationEnd: function () {\n\t\tif (this._map) {\n\t\t\tthis._map._mapPane.className = this._map._mapPane.className.replace(' leaflet-cluster-anim', '');\n\t\t}\n\t\tthis._inZoomAnimation--;\n\t\tthis.fire('animationend');\n\t},\n\t_animationZoomIn: function (previousZoomLevel, newZoomLevel) {\n\t\tvar me = this,\n\t\t    bounds = this._getExpandedVisibleBounds(),\n\t\t    i;\n\n\t\t//Add all children of current clusters to map and remove those clusters from map\n\t\tthis._topClusterLevel._recursively(bounds, previousZoomLevel, 0, function (c) {\n\t\t\tvar startPos = c._latlng,\n\t\t\t\tmarkers = c._markers,\n\t\t\t\tm;\n\n\t\t\tif (c._isSingleParent() && previousZoomLevel + 1 === newZoomLevel) { //Immediately add the new child and remove us\n\t\t\t\tL.FeatureGroup.prototype.removeLayer.call(me, c);\n\t\t\t\tc._recursivelyAddChildrenToMap(null, newZoomLevel, bounds);\n\t\t\t} else {\n\t\t\t\t//Fade out old cluster\n\t\t\t\tc.setOpacity(0);\n\t\t\t\tc._recursivelyAddChildrenToMap(startPos, newZoomLevel, bounds);\n\t\t\t}\n\n\t\t\t//Remove all markers that aren't visible any more\n\t\t\t//TODO: Do we actually need to do this on the higher levels too?\n\t\t\tfor (i = markers.length - 1; i >= 0; i--) {\n\t\t\t\tm = markers[i];\n\t\t\t\tif (!bounds.contains(m._latlng)) {\n\t\t\t\t\tL.FeatureGroup.prototype.removeLayer.call(me, m);\n\t\t\t\t}\n\t\t\t}\n\n\t\t});\n\n\t\tthis._forceLayout();\n\t\tvar j, n;\n\n\t\t//Update opacities\n\t\tme._topClusterLevel._recursivelyBecomeVisible(bounds, newZoomLevel);\n\t\t//TODO Maybe? Update markers in _recursivelyBecomeVisible\n\t\tfor (j in me._layers) {\n\t\t\tif (me._layers.hasOwnProperty(j)) {\n\t\t\t\tn = me._layers[j];\n\n\t\t\t\tif (!(n instanceof L.MarkerCluster) && n._icon) {\n\t\t\t\t\tn.setOpacity(1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//update the positions of the just added clusters/markers\n\t\tme._topClusterLevel._recursively(bounds, previousZoomLevel, newZoomLevel, function (c) {\n\t\t\tc._recursivelyRestoreChildPositions(newZoomLevel);\n\t\t});\n\n\t\t//Remove the old clusters and close the zoom animation\n\n\t\tsetTimeout(function () {\n\t\t\t//update the positions of the just added clusters/markers\n\t\t\tme._topClusterLevel._recursively(bounds, previousZoomLevel, 0, function (c) {\n\t\t\t\tL.FeatureGroup.prototype.removeLayer.call(me, c);\n\t\t\t\tc.setOpacity(1);\n\t\t\t});\n\n\t\t\tme._animationEnd();\n\t\t}, 250);\n\t},\n\n\t_animationZoomOut: function (previousZoomLevel, newZoomLevel) {\n\t\tthis._animationZoomOutSingle(this._topClusterLevel, previousZoomLevel - 1, newZoomLevel);\n\n\t\t//Need to add markers for those that weren't on the map before but are now\n\t\tthis._topClusterLevel._recursivelyAddChildrenToMap(null, newZoomLevel, this._getExpandedVisibleBounds());\n\t\t//Remove markers that were on the map before but won't be now\n\t\tthis._topClusterLevel._recursivelyRemoveChildrenFromMap(this._currentShownBounds, previousZoomLevel, this._getExpandedVisibleBounds());\n\t},\n\t_animationZoomOutSingle: function (cluster, previousZoomLevel, newZoomLevel) {\n\t\tvar bounds = this._getExpandedVisibleBounds();\n\n\t\t//Animate all of the markers in the clusters to move to their cluster center point\n\t\tcluster._recursivelyAnimateChildrenInAndAddSelfToMap(bounds, previousZoomLevel + 1, newZoomLevel);\n\n\t\tvar me = this;\n\n\t\t//Update the opacity (If we immediately set it they won't animate)\n\t\tthis._forceLayout();\n\t\tcluster._recursivelyBecomeVisible(bounds, newZoomLevel);\n\n\t\t//TODO: Maybe use the transition timing stuff to make this more reliable\n\t\t//When the animations are done, tidy up\n\t\tsetTimeout(function () {\n\n\t\t\t//This cluster stopped being a cluster before the timeout fired\n\t\t\tif (cluster._childCount === 1) {\n\t\t\t\tvar m = cluster._markers[0];\n\t\t\t\t//If we were in a cluster animation at the time then the opacity and position of our child could be wrong now, so fix it\n\t\t\t\tm.setLatLng(m.getLatLng());\n\t\t\t\tm.setOpacity(1);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcluster._recursively(bounds, newZoomLevel, 0, function (c) {\n\t\t\t\tc._recursivelyRemoveChildrenFromMap(bounds, previousZoomLevel + 1);\n\t\t\t});\n\t\t\tme._animationEnd();\n\t\t}, 250);\n\t},\n\t_animationAddLayer: function (layer, newCluster) {\n\t\tvar me = this;\n\n\t\tL.FeatureGroup.prototype.addLayer.call(this, layer);\n\t\tif (newCluster !== layer) {\n\t\t\tif (newCluster._childCount > 2) { //Was already a cluster\n\n\t\t\t\tnewCluster._updateIcon();\n\t\t\t\tthis._forceLayout();\n\t\t\t\tthis._animationStart();\n\n\t\t\t\tlayer._setPos(this._map.latLngToLayerPoint(newCluster.getLatLng()));\n\t\t\t\tlayer.setOpacity(0);\n\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tL.FeatureGroup.prototype.removeLayer.call(me, layer);\n\t\t\t\t\tlayer.setOpacity(1);\n\n\t\t\t\t\tme._animationEnd();\n\t\t\t\t}, 250);\n\n\t\t\t} else { //Just became a cluster\n\t\t\t\tthis._forceLayout();\n\n\t\t\t\tme._animationStart();\n\t\t\t\tme._animationZoomOutSingle(newCluster, this._map.getMaxZoom(), this._map.getZoom());\n\t\t\t}\n\t\t}\n\t},\n\n\t//Force a browser layout of stuff in the map\n\t// Should apply the current opacity and location to all elements so we can update them again for an animation\n\t_forceLayout: function () {\n\t\t//In my testing this works, infact offsetWidth of any element seems to work.\n\t\t//Could loop all this._layers and do this for each _icon if it stops working\n\n\t\tL.Util.falseFn(document.body.offsetWidth);\n\t}\n});\n"]],"start1":0,"start2":0,"length1":0,"length2":25880}]],"length":25880}
